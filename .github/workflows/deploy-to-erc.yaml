name: Deploy to Amazon ECR

on:
  push:
    branches:
      - main # Trigger this workflow on push to the main branch

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Log in to Amazon ECR
      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          region: ${{ secrets.AWS_REGION }}

      # Ensure ECR repository exists
      - name: Create ECR repository if not exists
        run: |
          aws_account_id=$(aws sts get-caller-identity --query Account --output text)
          ecr_repository_name=flask-app

          aws ecr describe-repositories --repository-names $ecr_repository_name || \
          aws ecr create-repository --repository-name $ecr_repository_name

      # Set up Docker buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Build and tag the Docker image
      - name: Build Docker image
        run: |
          aws_account_id=$(aws sts get-caller-identity --query Account --output text)
          ecr_repository_name=flask-app
          image_tag=${{ github.sha }}

          docker build -t $aws_account_id.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/$ecr_repository_name:$image_tag app/
          echo "IMAGE_URI=$aws_account_id.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/$ecr_repository_name:$image_tag" >> $GITHUB_ENV

      # Push the Docker image to ECR
      - name: Push Docker image to ECR
        run: |
          aws_account_id=$(aws sts get-caller-identity --query Account --output text)
          ecr_repository_name=flask-app

          docker push $aws_account_id.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/$ecr_repository_name:${{ github.sha }}

      # Output the image URI
      - name: Output Image URI
        run: |
          echo "Image URI: $IMAGE_URI"

      # Deploy to EC2
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.EC2_PUBLIC_IP }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script: |
            aws_account_id=${{ secrets.AWS_ACCOUNT_ID }}
            aws_region=${{ secrets.AWS_REGION }}
            ecr_url="$aws_account_id.dkr.ecr.$aws_region.amazonaws.com"
            docker login --username AWS --password "${{ secrets.ECR_PASSWORD }}" $ecr_url
            docker pull $ecr_url/flask-app:ce545708a46174451d9a0e066ddb92e5e86b6145
            docker stop flask-container || true
            docker rm flask-container || true
            docker run -d --name flask-container -p 5000:5000 \
            -e POSTGRES_USER=${{ secrets.POSTGRES_USER }} \
            -e POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} \
            -e POSTGRES_DB=${{ secrets.POSTGRES_DB }} \
            -e POSTGRES_HOST=${{ secrets.POSTGRES_HOST }} \
            $ecr_url/flask-app:ce545708a46174451d9a0e066ddb92e5e86b6145 flask run --host=0.0.0.0 --port=5000

            # Echo PostgreSQL environment variables
            echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}"
            echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}"
            echo "POSTGRES_DB=${{ secrets.POSTGRES_DB }}"
            echo "POSTGRES_HOST=${{ secrets.POSTGRES_HOST }}"
